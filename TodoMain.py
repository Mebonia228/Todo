import streamlit as st
import uuid
import sqlite3
import hashlib
from contextlib import closing

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE = 'todo_app.db'

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–≥–æ–≤
TAG_COLORS = {
    '—Ä–∞–±–æ—Ç–∞': '#4A90E2',
    '—É—á–µ–±–∞': '#50E3C2',
    '–ª–∏—á–Ω–æ–µ': '#BD10E0',
    '–≤–∞–∂–Ω–æ': '#FF0000',
    '–¥—Ä—É–≥–æ–µ': '#F8E71C'
}

DEFAULT_TAGS = list(TAG_COLORS.keys())


def create_tables():
    with closing(sqlite3.connect(DATABASE)) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id TEXT PRIMARY KEY,
                user_id INTEGER NOT NULL,
                title TEXT NOT NULL,
                description TEXT,
                status TEXT NOT NULL,
                tags TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        conn.commit()


create_tables()


def register_user(username, password):
    with closing(sqlite3.connect(DATABASE)) as conn:
        cursor = conn.cursor()
        try:
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)',
                           (username, hashed_password))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False


def verify_user(username, password):
    with closing(sqlite3.connect(DATABASE)) as conn:
        cursor = conn.cursor()
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        cursor.execute('SELECT id FROM users WHERE username=? AND password=?',
                       (username, hashed_password))
        return cursor.fetchone()


def get_tasks(user_id):
    with closing(sqlite3.connect(DATABASE)) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM tasks WHERE user_id=?', (user_id,))
        return [{
            'id': row[0],
            'title': row[2],
            'description': row[3],
            'status': row[4],
            'tags': row[5].split(',') if row[5] else []
        } for row in cursor.fetchall()]


def add_task(user_id, task_data):
    with closing(sqlite3.connect(DATABASE)) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO tasks (id, user_id, title, description, status, tags)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            task_data['id'],
            user_id,
            task_data['title'],
            task_data['description'],
            task_data['status'],
            ','.join(task_data['tags'])
        ))
        conn.commit()

def auth_form():
    login_tab, register_tab = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    with login_tab:
        with st.form("–í—Ö–æ–¥"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            if st.form_submit_button("–í–æ–π—Ç–∏"):
                user = verify_user(username, password)
                if user:
                    st.session_state.user = {'id': user[0], 'username': username}
                    st.rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    with register_tab:
        with st.form("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
            new_username = st.text_input("–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
            confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
            if st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
                if new_password != confirm_password:
                    st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                elif register_user(new_username, new_password):
                    st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ")
                else:
                    st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")

def update_task_status(task_id, new_status):
    with closing(sqlite3.connect(DATABASE)) as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE tasks SET status=? WHERE id=?', (new_status, task_id))
        conn.commit()


def delete_task(task_id):
    with closing(sqlite3.connect(DATABASE)) as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM tasks WHERE id=?', (task_id,))
        conn.commit()


def tag_element(tag):
    color = TAG_COLORS.get(tag, '#CCCCCC')
    return f'<span style="background-color: {color}; color: black; padding: 2px 8px; border-radius: 12px; font-size: 0.8em;">{tag}</span>'


def task_card(task):
    with st.container(border=True):
        st.markdown(f"**{task['title']}**", unsafe_allow_html=True)

        if task['description']:
            st.markdown(f"<div style='margin: 4px 0;'>{task['description']}</div>", unsafe_allow_html=True)

        if task['tags']:
            tags_html = " ".join([tag_element(tag) for tag in task['tags']])
            st.markdown(f"<div style='margin: 8px 0;'>{tags_html}</div>", unsafe_allow_html=True)

        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        cols = st.columns([1, 1, 1, 0.5])
        with cols[0]:
            if task['status'] != 'todo':
                if st.button("‚óÄÔ∏è", help="–í–µ—Ä–Ω—É—Ç—å –≤ '–°–¥–µ–ª–∞—Ç—å'", key=f"todo_{task['id']}"):
                    update_task_status(task['id'], 'todo')
                    st.rerun()
        with cols[1]:
            if task['status'] != 'in_progress':
                if st.button("‚è≥", help="–í —Ä–∞–±–æ—Ç—É", key=f"progress_{task['id']}"):
                    update_task_status(task['id'], 'in_progress')
                    st.rerun()
        with cols[2]:
            if task['status'] != 'done':
                if st.button("‚úÖ", help="–ó–∞–≤–µ—Ä—à–∏—Ç—å", key=f"done_{task['id']}"):
                    update_task_status(task['id'], 'done')
                    st.rerun()
        with cols[3]:
            if st.button("üóëÔ∏è", help="–£–¥–∞–ª–∏—Ç—å", key=f"delete_{task['id']}"):
                delete_task(task['id'])
                st.rerun()


def main_app():
    st.title("üöÄ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–º–µ—Ç–æ–∫")

    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", expanded=True):
        with st.form("new_task_form"):
            title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫*", placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫...")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", placeholder="–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏...")
            tags = st.multiselect(
                "–¢–µ–≥–∏",
                options=DEFAULT_TAGS,
                format_func=lambda x: x.capitalize(),
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏..."
            )

            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
            if submitted:
                if not title:
                    st.error("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
                else:
                    task_id = str(uuid.uuid4())
                    new_task = {
                        'id': task_id,
                        'title': title,
                        'description': description,
                        'status': 'todo',
                        'tags': tags
                    }
                    add_task(st.session_state.user['id'], new_task)
                    st.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    st.subheader("–í–∞—à–∏ –∑–∞–¥–∞—á–∏")
    todo_col, progress_col, done_col = st.columns(3)

    all_tasks = get_tasks(st.session_state.user['id'])

    with todo_col:
        st.markdown("### üì• –°–¥–µ–ª–∞—Ç—å")
        for task in [t for t in all_tasks if t['status'] == 'todo']:
            task_card(task)

    with progress_col:
        st.markdown("### ‚è≥ –í —Ä–∞–±–æ—Ç–µ")
        for task in [t for t in all_tasks if t['status'] == 'in_progress']:
            task_card(task)

    with done_col:
        st.markdown("### ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        for task in [t for t in all_tasks if t['status'] == 'done']:
            task_card(task)

    st.divider()
    st.caption(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)} | "
               f"–°–¥–µ–ª–∞—Ç—å: {len([t for t in all_tasks if t['status'] == 'todo'])} | "
               f"–í —Ä–∞–±–æ—Ç–µ: {len([t for t in all_tasks if t['status'] == 'in_progress'])} | "
               f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len([t for t in all_tasks if t['status'] == 'done'])}")

    if st.button("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", type="primary"):
        del st.session_state.user
        st.rerun()


if 'user' not in st.session_state:
    st.session_state.user = None

if st.session_state.user:
    main_app()
else:
    st.markdown("## –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
    auth_form()
